# -*- coding: utf-8 -*-
"""
Created on Sun Sep 27 09:46:34 2020

@author: lukin
"""

'''
Задача #1: множественная форма числительных
Одна из самых популярных задач при разработке программных продуктов
 с интерфейсом на русском языке - это согласование числительных
 множественного числа: 1 студент, 2 студента, 3 студента, 11 студентов т.д.
 Выводить информацию вида
 “На курс зачислено 11 студент” - выглядит совсем не красиво.

Твоя задача написать функцию plural_form согласования окончаний 
существительных в зависимости от переданного числа. 
'''
'''
ВНИМАНИЕ! Я НЕМНОГО ОТОШЕЛ ОТ УСЛОВИЙ ЗАДАЧИ. ЗАПИЛИЛ ОСНОВНУЮ ФУНКЦИЮ
НА ОДНОМ ПАРАМЕТРЕ. ЭТОТ ПАРАМЕТР ТОЖЕ ФУНКЦИЯ enter_a_number() ИЗ НЕЕ 
МЫ ПОЛУЧАЕМ ОСНОВНОЕ ЧИСЛО ИЗ КОТОРОГО БУДЕМ ПОЛУЧАТЬ ТОТ ИЛИ ИНОЙ ВАРИАНТ
ОКОНЧАНИЯ СЛОВА. МНЕ ПОКАЗАЛОСЬ, ЧТО ПОСТРОИТЬ ОСНОВНУЮ ФУНКЦИЮ НА СПИСКЕ ОКОНЧАНИЙ
БУДЕТ БОЛЕЕ РАСШИРЯЕМО ВПОСЛЕДСТВИИ. В ПЕРЕМЕННУЮ answer МОЖНО БУДЕТ 
ДОБАВЛЯТЬ ЕЩЕ ВАРИАНТЫ, В СПИСОК list_of_possible_endings ОКОНЧАНИЯ ПО НЕОБХОДИМОСТИ
А В ФУНКЦИИ plural_form() ДОПИСЫВАТЬ ОБРАБОТКИ
'''
#создаем функцию, которая должна будет возвращать нам число
#не будем проверять на пустую строку т.к. пустая строка - уже не число
#бесконечным циклом будем проверять тип введенного значения пока он не будет
#равен int
def enter_a_number():
    enter_number = input('Введите число:')
    while type(enter_number) != int:
        try:
            enter_number = int(enter_number)
        except:
            print('Кажется вы ввели строку. Введите пожалуйста число...')
            enter_number = input('Будьте внимательнее-введите число:')
    return enter_number

#функция в которой выясняем объект счета
#в нашем частном случае это или яблоки или студенты
#значит выяснять будем только между этими двумя обектами
def invoice_object():
    answer = input('Выберите объект, который будем считать.\
                   Необходимо выбрать 1-яблоки или 2-студенты:')
    while type(answer) != int:
        try:
            answer = int(answer)
        except:
            print('Кажется вы ошиблись.')
            answer = input('Введите число 1-это яблоки или число 2-это студенты:')
    return answer
#print(invoice_object())    
#список возможных окончаний
list_of_possible_endings = ['', 'а', 'ов', '-но', 'о', '-ин']

#эти списки необходимы для определения остака от деления введенного 
#количества яблок или студентов
#все вычисления окончаний я построил на остатках от деления на 10
list_number = [0, 5, 6, 7, 8, 9]
numbers_of_exceptions = [2, 3, 4]
#это исключения
exceptions = [11, 12, 13, 14]

#ЭТО ОСНОВНАЯ ФУКЦИЯ В КОТОРОЙ БУДЕТ ВСЕ ПРОИСХОДИТЬ ;-)   
def plural_form(number):
    #это переменная выбора что считать 1-яблоки, 2-студентов
    count = invoice_object()
    remainder_of_division = number % 10
    final_str = ''
    if count == 1:
        root = 'яблок'
        #т.к наибольшее число окончаний для яблок "ок", то я определил корень слова "яблок"
        #все вычисления я основал от остатка от деления на 10 введенного числа "number"
        #т.к. за редкими исключениями (которые тоже обработаны в коде) если число
        #заканчивается на 1- то окончание "о" и к числу дописываем суффикс "-но" "121-но яблоко",
        #если число заканчивается на 2, 3, 4- то окончание "а" "552 яблока"
        #если иные, то без окончания "1347 яблок"
        print('Будем считать яблоки.')
        #обрабатываем варианты без окончаний "яблок"
        if remainder_of_division in list_number \
        and remainder_of_division not in numbers_of_exceptions and number != 1 \
        or number in exceptions:
            final_str += str(number) + ' ' + root
        #обрабатываем варианты с окончаниями "а" "яблока"
        elif remainder_of_division in numbers_of_exceptions:
            final_str += str(number) + ' ' + root + list_of_possible_endings[1]
        #вариант "одно яблоко" и последняя цифра числа 1, не число 11
        elif number == 1 or remainder_of_division == 1:
            final_str += str(number) + list_of_possible_endings[3] + \
            ' ' + root + list_of_possible_endings[4]
            
    elif count == 2:
        root = 'студент'
        #наибольшее число окончаний для студентов "ов"
        #я определил корень слова "студент"
        #все вычисления я основал от остатка от деления на 10 введенного числа "number"
        #т.к. за редкими исключениями (которые тоже обработаны в коде) если число
        #заканчивается на 1- то окончание "т", т.е. чистый корень 
        #и к числу дописываем суффикс "-ин" "121-ин студент",
        #если число заканчивается на 2, 3, 4- то окончание "а" "552 студента"
        #если иные, то без окончания "1347 яблок"
        print('Будем считать студентов.')
        #обрабатываем с окончанием "ов" т.е. - "студентов"
        if remainder_of_division in list_number\
        and remainder_of_division not in numbers_of_exceptions and number != 1 \
        or number in exceptions:
            final_str += str(number) + ' ' + root + list_of_possible_endings[2]
        elif remainder_of_division in numbers_of_exceptions:
            final_str += str(number) + ' ' + root + list_of_possible_endings[1]
        elif number == 1 or remainder_of_division == 1:
            final_str += str(number) + list_of_possible_endings[5] + \
            ' ' + root
    else:
        print('____________________________________________________________')
        print(f'Нужно было выбрать 1 или 2, а Вы выбрали {count}...')
        print('Никого мы считать не будем!!!')
        print('____________________________________________________________')
    
    return final_str

print(plural_form(enter_a_number()))












